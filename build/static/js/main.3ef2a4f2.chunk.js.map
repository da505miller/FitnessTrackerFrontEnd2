{"version":3,"sources":["Components/title.js","API/index.js","Components/register.js","Components/login.js","Components/home.js","Components/activities.js","Components/routines.js","Components/myroutines.js","index.js"],"names":["Title","id","className","chalk","require","registerNewUser","setToken","username","password","verifyPassword","a","alert","fetch","method","headers","body","JSON","stringify","response","json","result","user","token","console","log","cyan","localStorage","setItem","error","red","loginUser","getItem","userData","fetchPublicRoutines","fetchAllActivities","getUserRoutines","createRoutine","name","goal","isPublic","deleteRoutine","Register","props","history","useState","setUsername","setPassword","setVerifyPassword","onSubmit","event","preventDefault","push","onChange","target","value","type","placeholder","required","Login","match","userName","setUserName","confirmedPassword","setConfirmedPassword","url","to","Logout","onClick","storageToken","removeItem","Home","Activities","activities","setActivities","useEffect","map","element","index","description","Routines","routines","setRoutines","creatorName","activity","duration","count","Myroutines","userRoutines","setUserRoutines","setUser","displayRoutines","setDisplayRoutines","posts","_id","Newroutine","setName","setGoal","setPublic","useHistory","App","storedToken","path","render","routeProps","myRoutines","setMyRoutines","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.3ef2a4f2.chunk.js","sourcesContent":["import React from 'react';\n\n// This is just my title header with the title of my project and my name as the developer.\n\nconst Title = () => {\n    return  <div id=\"title\" className=\"jumbotron text-center\">\n                <h1 className=\"text-info\">FITNESS TRACKER</h1>\n                <h5 className=\"text-warning\">Developed by Derek Miller</h5>\n                \n                \n            </div>\n\n}\n\nexport default Title;\n","// These are all the fetch calls to the API\n\nconst chalk = require('chalk');\n\n// This function is used to register new user\nexport const registerNewUser = async (setToken, username, password, verifyPassword) => {\n    \n    try {\n        if (password !== verifyPassword) {\n            alert(\"PASSWORDS DON'T MATCH!\");\n            return;\n        }\n\n        const response = await fetch('http://fitnesstrac-kr.herokuapp.com/api/users/register', {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                \n                    username: username,\n                    password: password\n                \n            })\n        })\n        const result = await response.json();\n        const user = result.user;\n        const token = result.token\n        console.log(chalk.cyan(\"New registered user: \"), user)\n        setToken(token);\n        localStorage.setItem(\"token\", token);\n        if (result.error) throw result.error;\n        console.log(result)\n    }\n    catch (err) {\n        console.error(chalk.red(\"Trouble registering\"), err);\n    }\n   }\n\n// This function will login an existing user\nexport const loginUser = async (username, password, setToken) => {\n    try {const response = await fetch('http://fitnesstrac-kr.herokuapp.com/api/users/login', {\n     method: \"POST\",\n     headers: {\n       'Content-Type': 'application/json'\n     },\n     body: JSON.stringify({\n       \n         username: username,\n         password: password\n       \n     })\n   })\n         const result = await response.json();\n         console.log(result.token);\n         const token = result.token;\n         setToken(token);\n         localStorage.setItem(\"token\", token);\n         localStorage.getItem(\"token\");\n         if (result.error) throw result.error;\n         console.log(result);\n \n }\n     catch (err) {\n         console.error(chalk.red(\"Trouble logging in\"), err)\n     }\n}\n\n // test call to grab users info (token and to see if logged in)\n export const userData = async (token) => {\n    try {\n        const response = await fetch('http://fitnesstrac-kr.herokuapp.com/api/users/me', {\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + token\n            }\n        })\n        const result = await response.json();\n        console.log(chalk.cyan(\"Logged in user data: \"), result);\n        return result;\n       \n    }\n    catch (err) {\n        console.error(chalk.red(\"Trouble fetching user data!!!\"), err);\n    }\n} \n\n// This function fetches all current public routines from the API\nexport const fetchPublicRoutines = async () => {\n    try {\n        const response = await fetch('http://fitnesstrac-kr.herokuapp.com/api/routines', {\n            headers: {\n                'Content-Type': 'application/json'\n            },\n        }\n        )\n        const result = await response.json();\n        \n        \n        if (result.error) throw result.error;\n        console.log(result)\n        return result;\n    }\n    catch (err) {\n        console.error (chalk.red(\"Trouble fetching public routines\"), err)\n    }\n}\n\n// this will fetch all the activities\nexport const fetchAllActivities = async () => {\n    try {\n        const response = await fetch('http://fitnesstrac-kr.herokuapp.com/api/activities', {\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        }\n        )\n        const result = await response.json();\n\n        if (result.error) throw result.error;\n        console.log(result)\n        return result;\n    } \n    \n    catch (error) {\n        console.error(chalk.red('Trouble fetching all activities!!!'), error)\n    }\n}\n\n//this call will create a new activity with a valid token\nexport const createActivity = async (token, name, description) => {\n    try {\n        const response = await fetch('http://fitnesstrac-kr.herokuapp.com/api/activities', {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + token\n            },\n            body: JSON.stringify({\n                name: name,\n                description: description\n            }),\n        })\n        const result = await response.json();\n        if (result.error) throw result.error;\n        console.log(result);\n        return result;\n    } \n    \n    catch (error) {\n        console.error(chalk.red('Trouble creating activity!!!!'))\n        throw error;\n    }\n}\n\n//this will update an activity with a token, activityId, name, and description\nexport const updateActivity = async (token, id, name, description) => {\n    try {\n        const response = await fetch(`http://fitnesstrac-kr.herokuapp.com/api/activities/${id}`, {\n            method: 'PATCH',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + token\n            },\n            body: JSON.stringify({\n                name: name,\n                description: description\n            }),\n        })\n        const result = await response.json();\n        if (result.error) throw result.error;\n        console.log(result);\n        return result;\n    } \n    \n    catch (error) {\n        console.error(chalk.red('Trouble updating activity!!!'));\n        throw error;\n    }\n}\n\n//this will return a list of public routines which feature that activity\nexport const publicRoutinesByActivity = async (id) => {\n    try {\n        const response = await fetch(`http://fitnesstrac-kr.herokuapp.com/api/activities/${id}/routines`, {\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        })\n        const result = await response.json();\n        if (result.error) throw result.error;\n        console.log(result);\n        return result;\n    } \n    \n    catch (error) {\n        console.error(chalk.red('Error getting public routines that feature that activity!!!'));\n        throw error;\n    }\n}\n\n\n//this will fetch all the current user's routines by their username and token\nexport const getUserRoutines = async (username, token) => {\n    try {\n        const response = await fetch(`http://fitnesstrac-kr.herokuapp.com/api/users/${username}/routines`, {\n            method: \"GET\",\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + token\n            },\n        })\n        const result = response.json();\n\n        if (result.error) throw result.error;\n        console.log(result);\n        return result;\n    } \n    \n    catch (error) {\n        console.error(chalk.red('Trouble getting user routines!!!'));\n        throw error;\n    }\n}\n\n//this will attempt to create a new routine\nexport const createRoutine = async (token, name, goal, isPublic) => {\n    try {\n        const response = await fetch('http://fitnesstrac-kr.herokuapp.com/api/routines', {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + token\n            },\n            body: JSON.stringify({\n                name: name,\n                goal: goal,\n                isPublic: isPublic\n            }),\n        })\n        const result = await response.json();\n        if (result.error) throw result.error;\n        console.log(result);\n        return result;\n    } \n    \n    catch (error) {\n        console.error(chalk.red('ERROR creating new routine!!!'));\n        throw error;\n    }\n}\n\n//this will update a routine, notably change public/private, name, or goal\nexport const updateRoutine = async (token, id, name, goal, isPublic) => {\n    try {\n        const response = await fetch(`http://fitnesstrac-kr.herokuapp.com/api/routines/${id}`, {\n            method: \"PATCH\",\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + token\n            },\n            body: JSON.stringify({\n                name: name,\n                goal: goal,\n                isPublic: isPublic\n            }),\n        })\n        const result = await response.json();\n        if (result.error) throw result.error;\n        console.log(result);\n        return result;\n    } \n    \n    catch (error) {\n        console.error(chalk.red('ERROR updating routine!!!'));\n        throw error;\n    }\n}\n\n//this will hard delete a routine. make sure to delete all the routineActivities whose routine is the one being deleted\n//will hard delete a routine whose id is equal to routineId\nexport const deleteRoutine = async (token, id) => {\n    try {\n        const response = await fetch(`http://fitnesstrac-kr.herokuapp.com/api/routines/${id}`, {\n            method: \"DELETE\",\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + token\n            },\n        })\n        const result = await response.json();\n        if (result.error) throw result.error;\n        console.log(result);\n        return result;\n    } \n    \n    catch (error) {\n        console.error(chalk.red('ERROR deleting routine!!!'));\n        throw error;\n    }\n}\n\n//this attaches a single activity to a routine. prevents duplication on (routineId, activityId) pair\nexport const attachActivityToRoutine = async (token, id, actId, count, duration) => {\n    try {\n        const response = await fetch(`http://fitnesstrac-kr.herokuapp.com/api/routines/${id}/activities`, {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + token\n            },\n            body: JSON.stringify({\n                activityId: actId,\n                count: count,\n                duration: duration\n            }),\n        })\n        const result = await response.json();\n        if (result.error) throw result.error;\n        console.log(result);\n        return result;\n    } \n    \n    catch (error) {\n        console.error(chalk.red('ERROR attaching activity to routine!!!'));\n        throw error;\n    }\n}\n\n//this updates the count or duration on routine activity\nexport const updateOnRoutineActivity = async (token, id, count, duration) => {\n    try {\n        const response = await fetch(`http://fitnesstrac-kr.herokuapp.com/api/routine_activities/${id}`, {\n            method: \"PATCH\",\n            headers: {\n                \"Content-Type\": 'application/json',\n                'Authorizaion': 'Bearer ' + token\n            },\n            body: JSON.stringify({\n                count: count,\n                duration: duration\n            }),\n        })\n        const result = await response.json();\n        if (result.error) throw result.error;\n        console.log(result);\n        return result;\n    } \n    \n    catch (error) {\n        console.error(chalk.red('ERROR updating count or duration on routine activity!!!'));\n        throw error;\n    }\n}\n\n//this will remove an activity from a routine(hard deleting routine_activity)\n//dissociating an activity from a routine\nexport const deleteActivityFromRoutine = async (token, id) => {\n    try {\n        const response = await fetch(`http://fitnesstrac-kr.herokuapp.com/api/routine_activities/${id}`, {\n            method: \"DELETE\",\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + token\n            },\n        })\n        const result = response.json();\n        if (result.error) throw result.error;\n        console.log(result);\n        return result;\n    } \n    \n    catch (error) {\n        console.error(chalk.red('ERROR deleting activity from routine!!!'));\n        throw error;\n    }\n}","import React from 'react';\nconst chalk = require('chalk');\nimport { useState } from 'react';\nimport { registerNewUser } from '../API';\n\n// The register component is a form where a new user can enter a username, password, and they must verify their password. \n// All fields are required.\n// Once the fill out form and hit register button, their info will now be authorized and it will push them to the login page where they must login to the site.\n\n\nconst Register = (props) => {\n    const setToken = props.setToken;\n    const history = props.history;\n\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n    const [verifyPassword, setVerifyPassword] = useState('');\n\n    return(\n        <form onSubmit={async (event) => {\n            event.preventDefault();\n            try {\n                const response = await registerNewUser(setToken, username, password, verifyPassword);\n                history.push(\"/login\")\n            }\n            catch (error) {\n                console.error(chalk.red('error registering user onSubmit'), error);\n\n            }\n            \n            \n        }}>\n                <h3>Register</h3>\n\n                <div className=\"form-group\">\n                    <label>Username</label>\n                    <input onChange={(event) => setUsername(event.target.value)} type=\"text\" className=\"form-control\" placeholder=\"Username\" required />\n                </div>\n\n                <div className=\"form-group\">\n                    <label>Password</label>\n                    <input onChange={(event) => setPassword(event.target.value)} type=\"password\" className=\"form-control\" placeholder=\"Enter password\" required />\n                </div>\n\n                <div className=\"form-group\">\n                    <label>Verify Password</label>\n                    <input onChange={(event) => setVerifyPassword(event.target.value)} type=\"password\" className=\"form-control\" placeholder=\"Verify password\" required />\n                </div>\n\n                <button type=\"submit\" className=\"btn btn-primary btn-dark btn-lg btn-block\">Register</button>\n                \n            </form>\n    )\n}\n\n\n\n\n\nexport default Register;","import React, { useState } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport { registerNewUser, loginUser } from '../API';\nconst chalk = require('chalk');\n\n\nconst Login = ({ setToken, match, history }) => {\n\n    const [userName, setUserName] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [confirmedPassword, setConfirmedPassword] = useState(\"\");\n\n    return(\n        <form\n            onSubmit={(event) => {\n                event.preventDefault();\n                \n                if (match.url === \"/register\") {\n                    registerNewUser(setToken, userName, password, confirmedPassword)};\n                    history.push(\"/login\")\n                if (match.url === \"/login\") {\n                    console.log(userName, password, confirmedPassword);\n                    loginUser(userName, password, setToken)};\n                    history.push(\"/home\")\n                    \n            } \n                }>\n            <div className=\"form-group\">\n                    <label>Username</label>\n                    <input \n                        onChange={({target: {value}}) => setUserName(value)} \n                        type=\"text\" \n                        className=\"form-control\" \n                        placeholder=\"Username\" \n                        required \n                    />\n            </div>\n\n            <div className=\"form-group\">\n                    <label>Password</label>\n                    <input \n                        onChange={({target: {value}}) => setPassword(value)} \n                        type=\"password\" \n                        className=\"form-control\" \n                        placeholder=\"Enter password\" \n                        required \n                    />\n            </div>\n            {\n                match.url === \"/register\" ?\n            \n                (<div className=\"form-group\">\n                    <label>Verify Password</label>\n                    <input \n                        onChange={({target: {value}}) => setConfirmedPassword(value)} \n                        type=\"password\"\n                        value={confirmedPassword} \n                        className=\"form-control\" \n                        placeholder=\"Verify password\" \n                        required \n                    />\n                </div>) : null}\n\n                <button \n                    type=\"submit\" \n                    className=\"btn btn-primary btn-dark btn-lg btn-block\">Login\n                </button>\n            {\n                match.url === \"/register\" ?\n                (<Link to=\"login\"> Already have an account?</Link>) : \n                 <Link to=\"register\"> Don't have an account?</Link>\n            }\n        </form>\n    )\n\n\n}\n\n\nconst Logout = ({ token, setToken, history }) => {\n\n    return (\n        <button\n            onClick={(event) => {\n                const storageToken = token;\n                console.log(chalk.cyan(\"storage token is:\"), storageToken)\n                \n                if (storageToken) {\n                    localStorage.removeItem(\"token\");\n                    setToken(null);\n                    history.push(\"/login\");\n                    }\n            }} \n            type=\"submit\"\n            className=\"btn btn-primary btn-dark btn-lg btn-block\">Logout\n        </button>\n    )\n\n\n}\n\n\nexport { Login, Logout };","const Home = () => {\n    return <p>Home</p>;\n  };\n  \n  export default Home;","import React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { fetchAllActivities } from '../API';\n\n\nconst Activities = (props) => {\n\n    const activities = props.activities;\n    const setActivities = props. setActivities;\n    const token = props.token;\n\n    useEffect( async() => {\n\n        const result = await fetchAllActivities();\n        setActivities(result);\n        console.log(activities);\n\n    }, []);\n\n    return (<div id=\"post-box\" className=\"form-group\">\n                <h1 className=\"post-title text-center\">Activities</h1>\n                <div id=\"post\" className=\"container\">\n                    {activities.map((element, index) => {\n            \n                        return (\n                            <div key={index} className=\"containter\">\n                                <div className=\"form-group list-group-item-info\">\n                                    ID: { element.id }\n                                </div>\n                                <div className=\"form-group bg-success\">\n                                    Name: {element.name }\n                                </div>\n                                <div className=\"form-group bg-success list-group-item-text\">\n                                    Description: { element.description }\n                                </div>\n                                <br></br>\n                                {/* <br></br>\n                                {token ? <Message token={token} _id={element._id}/>  : null}\n                                <br></br>\n                                <br></br> */}\n                            </div>)\n                    })}\n                </div>\n            </div>)\n\n\n\n\n}\n\n\nexport default Activities;","import React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { fetchPublicRoutines } from '../API';\n\nconst Routines = (props) => {\n\n    const routines = props.routines;\n    const setRoutines = props.setRoutines;\n    const token = props.token;\n\n    // As soon as page hits the screen useEffect will fetch all public routines from api and set them on state\n    useEffect( async () => {\n\n        const result = await fetchPublicRoutines();\n        setRoutines(result);\n        console.log(routines)\n\n    }, []);\n\n    return (<div id=\"post-box\" className=\"form-group\">\n                <h1 className=\"post-title text-center\">Public Routines</h1>\n                <div id=\"post\" className=\"container\">\n                    {routines.map((element, index) => {\n            \n                        return (\n                            <div key={index} className=\"containter\">\n                                <h2 className=\"list-group-item-heading\">\n                                    { element.name }\n                                </h2>\n                                <div className=\"form-group list-group-item-info\">\n                                    Created by: { element.creatorName }\n                                </div>\n                                <div className=\"form-group list-group-item-info\">\n                                    Goal: { element.goal }\n                                </div>\n                                {/* <div className=\"form-group bg-success list-group-item-text\">\n                                    Activity: { element.activity }\n                                </div> */}\n                                {element.activities.map((activity) => {\n                                    return (\n                                        <div className=\"activity\">\n                                            <h4 className=\"form-group bg-success\">Activities: {activity.name}</h4>\n                                            <p>....Activity Description: {activity.description}</p>\n                                            <p>....Duration: {activity.duration}</p>\n                                            <p>....Count: {activity.count}</p>\n                                        </div>\n                                    );\n                                })}\n                            </div>)\n                    })}\n                </div>\n            </div>)\n}\n\n\n\nexport default Routines;","import React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { userData, \n    publicRoutinesByActivity, \n    getUserRoutines, \n    createRoutine, \n    updateRoutine, \n    deleteRoutine, \n    attachActivityToRoutine, \n    updateOnRoutineActivity, \n    deleteActivityFromRoutine } from '../API';\nimport { Link } from 'react-router-dom';\n\nconst Myroutines = (props) => {\n    const routines = props.routines;\n    const setRoutines = props.setRoutines;\n    const token = props.token;\n    const history = props.history;\n\n    const [userRoutines, setUserRoutines] = useState([]);\n    const [user, setUser] = useState([]);\n\n    const [displayRoutines, setDisplayRoutines] = useState([]);\n\n    // useEffect(async () => {\n        \n    //     const result = await getUserRoutines(token);\n    //     setUserRoutines(result);\n    //     console.log(userRoutines);\n    \n    // }, []);\n\n    // useEffect(async () => {\n    //     if(token) {\n    //     const getUser = await userData(token)\n    //     console.log('getUser', getUser);\n    //     const userRoutineData = await getUserRoutines(getUser, token)\n    //     console.log(userRoutineData);\n        \n\n    //     }\n \n    //  }, [])\n\n    useEffect(() => {\n        if(token) {\n            userData(token, setUser);\n        }\n    }, [token]);\n\n    useEffect(() => {\n        if(user.username) {\n            getUserRoutines(user, setUserRoutines, setDisplayRoutines);\n            console.log(\"user routines: \", userRoutines)\n        }\n    }, [user]);\n\n    console.log(\"user routines: \", userRoutines)\n\n    return (<div id=\"post-box\" className=\"form-group\">\n    <h1 className=\"post-title text-center\">Current User Routines</h1>\n    <div id=\"post\" className=\"container\">\n        {displayRoutines.map((element, index) => {\n\n            return (\n                <div key={index} className=\"containter\">\n                    <h2 className=\"list-group-item-heading\">\n                        Routine Id: { element.id }\n                    </h2>\n                    <div className=\"form-group list-group-item-info\">\n                        Creator Name: { element.creatorName }\n                    </div>\n                    <div className=\"form-group list-group-item-info\">\n                        isPublic: {element.isPublic }\n                    </div>\n                    <div className=\"form-group list-group-item-info\">\n                        Name: { element.name}\n                    </div>\n                    <div className=\"form-group list-group-item-info\">\n                        Goal: {element.goal }\n                    </div>\n                    <div className=\"form-group\">\n                                    <button \n                                    onClick={async (event) => {\n                                        \n                                        try {\n                                             // calls api function to delete routine and then fetches all the routines of user.\n                                             // When delete button is pressed the post should delete from main routines page and push user to the routines page\n                                            \n                                            const response = await deleteRoutine(token, posts._id)\n                                            console.log(response)\n                                            getUserRoutines(userRoutines);\n                                            \n                                            history.push(\"/routines\")\n                                            \n                                        }\n                                        catch (err) {\n                                            console.error(\"trouble deleting routine\", err)\n                                        }\n                                    }} \n                                    \n                                    type=\"submit\" className=\"btn btn-primary\">Delete Post</button>\n                                </div>\n                    <br></br>\n                </div>)\n        })}\n    </div>\n    <Link to=\"/newroutine\" className=\"link\">Create Routine</Link>\n</div>)\n\n\n\n}\n\n// const Myroutines = (props) => {\n\n//     const myRoutines = props.myRoutines;\n//     const token = props.token;\n//     const setMyRoutines = props.setMyRoutines;\n//     let userObj = {};\n\n//     async function getMe() {\n//         const response = await userData(token);\n//         userObj = response;\n//     }\n    \n//     getMe();\n\n//     async function getMyRoutines() {\n//         const response = await fetch(`https://fitnesstrac-kr.herokuapp.com/api/users/${userObj.username}/routines`, {\n//         headers: {\n//           'Content-Type': 'application/json',\n//           'Authorization': `Bearer ${token}`\n//         },\n//       })\n//       const result = await response.json();\n//       if (result.error) throw result.error;\n//       console.log(result);\n//       setMyRoutines(result);\n//     }\n    \n    \n//     useEffect(() => {\n//         getMyRoutines();\n//     },[]);\n\n//     return (<div id=\"post-box\" className=\"form-group\">\n//     <h1 className=\"post-title text-center\">Current User Routines</h1>\n//     <div id=\"post\" className=\"container\">\n//         {myRoutines.map((element, index) => {\n\n//             return (\n//                 <div key={index} className=\"containter\">\n//                     <h2 className=\"list-group-item-heading\">\n//                         Routine Id: { element.id }\n//                     </h2>\n//                     <div className=\"form-group list-group-item-info\">\n//                         Creator Name: { element.creatorName }\n//                     </div>\n//                     <div className=\"form-group list-group-item-info\">\n//                         isPublic: {element.isPublic }\n//                     </div>\n//                     <div className=\"form-group list-group-item-info\">\n//                         Name: { element.name}\n//                     </div>\n//                     <div className=\"form-group list-group-item-info\">\n//                         Goal: {element.goal }\n//                     </div>\n//                     <br></br>\n//                 </div>)\n//         })}\n//     </div>\n//     <Link to=\"/newroutine\" className=\"link\">Create Routine</Link>\n// </div>)\n// }\n\n    \n    \n\n\nconst Newroutine = ({ token, routines, setRoutines }) => {\n\n    const [name, setName] = useState(\"\");\n    const [goal, setGoal] = useState(\"\");\n    const [isPublic, setPublic] = useState(true);\n    const history = useHistory();\n\n    return(\n        <form onSubmit={async (event) => {\n            event.preventDefault();\n            try {\n                const response = await createRoutine(token, name, goal, isPublic);\n                \n                setRoutines([...routines, response]);\n                history.push(\"/routines\")\n            }\n            catch (error) {\n                console.error(error)\n            }\n        }}>\n                <h3>Make a new routine</h3>\n\n                <div className=\"form-group\">\n                    <label>Name</label>\n                    <input onChange={(event) => setName(event.target.value)} type=\"text\" className=\"form-control\" placeholder=\"Title\" required />\n                </div>\n\n                <div className=\"form-group\">\n                    <label>Goal</label>\n                    <input onChange={(event) => setGoal(event.target.value)} type=\"text\" className=\"form-control\" placeholder=\"Description\" required />\n                </div>\n\n                <div className=\"form-group\">\n                    <label>isPublic</label>\n                    <input onChange={(event) => setPublic(event.target.value)} type=\"text\" className=\"form-control\" placeholder=\"Description\" required />\n                </div>\n                <button type=\"submit\" className=\"btn btn-primary btn-block\">Create Routine</button>\n                \n            </form>\n    )\n}\n\n\nexport { Myroutines, Newroutine };","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { useState, useEffect } from 'react'; \nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nimport { Title, Home, Login, Logout, Register, Routines, Myroutines, Newroutine, Activities } from './Components';\n\nconst App = () => {\n\n    const [token, setToken] = useState(null);\n    const [user, setUser] = useState(null);\n    const [routines, setRoutines] = useState([]);\n    const [activities, setActivities] = useState([]);\n    const [myRoutines, setMyRoutines] = useState([]);\n\n\n    // As soon as page hits screen it will take the token from local storage (if there is one) and set it to storedToken.\n    useEffect(() => {\n\n        const storedToken = localStorage.getItem(\"token\");\n        if (storedToken) {\n            setToken(storedToken);\n        }\n    }, []);\n\n\n    return( \n        <><Title />\n            <h1>Welcome to the Fitness Tracker App</h1>\n        <br></br>\n        <Router>\n            <div id=\"link-containter\">\n                <Link to=\"/home\" className=\"link\">HOME</Link>\n                {!token ? <Link to=\"/login\" className=\"link\"> LOGIN </Link> : <Link to=\"/logout\" className=\"link\"> LOGOUT </Link>}\n                {!token ? <Link to=\"/register\" className=\"link\"> REGISTER </Link> : null}\n                <Link to=\"/routines\" className=\"link\"> ROUTINES </Link>\n                {token ? <Link to=\"/myroutines\" className=\"link\"> MY ROUTINES </Link> : null}\n                <Link to=\"/activities\" className=\"link\"> ACTIVITIES </Link>\n            </div>\n\n            <Route path=\"/home\" render={(routeProps) => <Home />} />\n            <Route path=\"/login\" render={(routeProps) => <Login {...routeProps} setToken={setToken} />} />\n            <Route path=\"/logout\" render={(routeProps) => <Logout {...routeProps} token={token} setToken={setToken} />} />\n            <Route path=\"/register\" render={(routeProps) => <Register {...routeProps} setToken={setToken} />} />\n            <Route path=\"/routines\" render={(routeProps) => <Routines {...routeProps} \n                                                                token={token}\n                                                                routines={routines}\n                                                                setRoutines={setRoutines}\n                                                                activities={activities}\n                                                                setActivities={setActivities} />} />\n            <Route path=\"/myroutines\" render={(routeProps) => <Myroutines {...routeProps}\n                                                                 token={token}\n                                                                 myRoutines={routines}\n                                                                 setMyRoutines={setRoutines}\n                                                                 activities={activities}\n                                                                 setActivities={setActivities} />} />\n            <Route path=\"/newroutine\" render={(routeProps) => <Newroutine {...routeProps} token={token}\n                                                                routines={routines}\n                                                                setRoutines={setRoutines} />} />\n            <Route path=\"/activities\" render={(routeProps) => <Activities {...routeProps}\n                                                                token={token}\n                                                                activities={activities}\n                                                                setActivities={setActivities} />} />\n        </Router>\n\n        {!token ? <h3>Please register or login to use the app unless you are just visiting.</h3> : null}\n        </>)\n    \n\n}\n\n\nReactDOM.render(\n    <App />,\n    document.getElementById('app'),\n  );"],"sourceRoot":""}